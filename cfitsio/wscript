# vim: set syntax=python:

# This wscript file merely calls out to the standard CFITSIO Makefile
# to build libcfitsio.a

from distutils import dir_util
import glob
import os
import shutil

def options(ctx):
    ctx.add_option(
        '--use-system-cfitsio', action='store_true',
        help="""Use a copy of CFITSIO installed elsewhere on this system,
otherwise use the copy included with hstcal.  You may need to set
the CFLAGS and LDFLAGS environment variables to point to the
installed location of CFITSIO.""")
    
def configure(ctx):
    if ctx.options.use_system_cfitsio:
        ctx.msg('Using cfitsio', 'system')
        ctx.check_cc(
            header_name='fitsio.h', lib='cfitsio',
            uselib_store="CFITSIO")
        ctx.env.USE_SYSTEM_CFITSIO = True
    else:
        ctx.msg('Using cfitsio', 'local')

        ctx.find_program('make')

        src_path = os.path.abspath('cfitsio')
        platform_path = os.path.join(ctx.bldnode.abspath(), 'lock_cfitsio')

        # Copy the cfitsio tree into the build tree.  If we don't, the .o
        # files live in the source tree and the same checkout can not be
        # used to build for multiple platforms.
        ctx.start_msg('Copying cfitsio')
        if os.path.exists(platform_path):
            shutil.rmtree(platform_path)
        dir_util.copy_tree(src_path, platform_path)
        ctx.end_msg('done', 'GREEN')

        ctx.start_msg('Configuring cfitsio')
        pwd = os.getcwd()
        ctx.exec_command('cd %s; ./configure; cd %s' % (platform_path, pwd))
        ctx.end_msg('done', 'GREEN')

        ctx.env.LIBPATH_CFITSIO = [platform_path]
        ctx.env.INCLUDES_CFITSIO = [src_path]
        ctx.env.STLIB_CFITSIO = ['cfitsio']
        ctx.env.USE_SYSTEM_CFITSIO = False

def build(ctx):
    if ctx.env.USE_SYSTEM_CFITSIO:
        return

    if ctx.cmd == 'clean':
        return clean(ctx)

    src_path = os.path.abspath('cfitsio')
    platform_path = ctx.env.LIBPATH_CFITSIO[0]
    dir_util.copy_tree(src_path, platform_path, update=True)
    
    def run_makefile(task):
        # cd into the cfitsio directory, run 'make', step back out
        pwd = os.getcwd()
        cwd = platform_path
        jobs = ctx.options.jobs
        task.exec_command('cd %s; make -j %d; cd %s' % (cwd, jobs, pwd))

    # Just assume all .c and .h files in the cfitsio directory
    # contribute to libcfitsio.a.  The CFITSIO Makefile itself will
    # worry about the details
    sources = [
        os.path.basename(x) for x in
        glob.glob(os.path.join(platform_path, '*.c')) +
        glob.glob(os.path.join(platform_path, '*.h')) +
        [os.path.join(platform_path, 'configure')]]

    ctx(
        name='cfitsio',
        source=sources,
        target='../lock_cfitsio/libcfitsio.a',
        rule=run_makefile)

    # CFITSIO should be built before everything else.  This ensures
    # that.
    ctx.add_group()

def clean(ctx):
    pwd = os.getcwd()
    cwd = platform_path = ctx.env.LIBPATH_CFITSIO[0]
    ctx.exec_command('cd %s; make clean; cd %s' % (cwd, pwd))
